#+TITLE: GAN

https://arxiv.org/abs/1406.2661

[[file:./images/screenshot-04.png]]

#+BEGIN_SRC python :noweb yes :tangle yes
<<core>>
#+END_SRC

* Implementation
:PROPERTIES:
:header-args: :noweb-ref core
:END:


#+BEGIN_SRC python :noweb yes
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable
import numpy as np
from torchvision.utils import save_image

<<discriminator>>

<<generator>>

def main():
    <<preprocessing>>

    img_shape = (1, args.img_size, args.img_size)
    disc = discriminator(img_shape)
    gen = generator(img_shape, args.latent_dim)

    rng = np.random.default_rng(seed=args.seed)
    optim_discriminator = torch.optim.Adam(disc.parameters(), lr=args.lr)
    optim_generator = torch.optim.Adam(gen.parameters(), lr=args.lr)

    loss = torch.nn.BCELoss()
    np.random.default_rng(seed=args.seed)
    k = 1
    for epoch in range(args.epochs):
        for i, (imgs, _) in enumerate(dataloader):

            real_imgs = Variable(imgs.type(torch.Tensor))

            valid = Variable(torch.Tensor(imgs.size(0), 1).fill_(1.0), requires_grad=False)
            fake = Variable(torch.Tensor(imgs.size(0), 1).fill_(0.0), requires_grad=False)

            for discrim_training_step in range(k):
                z = Variable(torch.Tensor(rng.normal(0, 1, size=(imgs.shape[0], args.latent_dim))))

                generated_imgs = gen(z)

                optim_discriminator.zero_grad()

                real_loss = loss(disc(real_imgs), valid)
                fake_loss = loss(disc(generated_imgs.detach()), fake)

                total_loss = 0.5 * (real_loss + fake_loss)
                total_loss.backward()
                optim_discriminator.step()

            z = Variable(torch.Tensor(rng.normal(0, 1, size=(imgs.shape[0], args.latent_dim))))

            generated_imgs = gen(z)

            optim_generator.zero_grad()
            generator_loss = loss(disc(generated_imgs), valid)

            generator_loss.backward()
            optim_generator.step()

        print(f'({epoch}) [G]: {generator_loss} | [D]: {total_loss}')
        if (epoch % 15 == 0):
          torch.save(disc.state_dict(),f'./models/generator{epoch}.pt')
          torch.save(gen.state_dict(),f'./models/discriminator{epoch}.pt')

if __name__ == '__main__':
    main()
#+END_SRC

* Preprocessing
:PROPERTIES:
:header-args: :noweb-ref preprocessing
:END:

Parse arguments
#+BEGIN_SRC python
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('data', help='path to data directory')
parser.add_argument('--batch', type=int, default=64, help='batch size')
parser.add_argument('--img_size', type=int, default=28, help='image size')
parser.add_argument('--seed', type=int, default=1337, help='seed for gaussian prior')
parser.add_argument('--latent_dim', type=int, default=100, help='dimension of the latent space for the generator')
parser.add_argument('--lr', type=float, default=0.0001, help='learning rate of generator and discriminator')
parser.add_argument('--epochs', type=int, default=150, help='number of epochs during training')
args = parser.parse_args()
#+END_SRC

Load data
#+BEGIN_SRC python
from torch.utils.data import DataLoader
from torchvision import datasets
import torchvision.transforms as transforms
dataloader = torch.utils.data.DataLoader(
    datasets.MNIST(
        args.data,
        train=True,
        download=True,
        transform=transforms.Compose(
            [transforms.Resize(args.img_size), transforms.ToTensor(), transforms.Normalize([0.5], [0.5])]
        ),
    ),
    batch_size=args.batch,
    shuffle=True,
)
#+END_SRC

* Discriminator
:PROPERTIES:
:header-args: :noweb-ref discriminator
:END:

#+BEGIN_SRC python
class discriminator(nn.Module):
    def __init__(self, image_shape):
      super(discriminator, self).__init__()
      self.image_shape = image_shape

      self.fc1 = nn.Linear(int(np.prod(self.image_shape)), 128)
      self.fc2 = nn.Linear(128, 64)
      self.fc3 = nn.Linear(64, 1)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = torch.sigmoid(self.fc3(x))
        return x
#+END_SRC

* Generator
:PROPERTIES:
:header-args: :noweb-ref generator
:END:

#+BEGIN_SRC python
class generator(nn.Module):
    def __init__(self, image_shape, n_latent):
        super(generator, self).__init__()
        self.image_shape = image_shape
        self.n_latent = n_latent
        self.fc1 = nn.Linear(n_latent, 128)
        self.fc2 = nn.Linear(128, 256)
        self.fc3 = nn.Linear(256, int(np.prod(self.image_shape)))

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = torch.tanh(self.fc3(x))
        return x
#+END_SRC


* Image Viewer
#+BEGIN_SRC python :tangle "image_viewer.py"
import numpy as np
from PIL import Image
import argparse
p = argparse.ArgumentParser()
p.add_argument('image')
args = p.parse_args()

image = np.array(Image.open(args.image).convert('L'))

from matplotlib import pyplot
for i,img in enumerate(image):
   reshaped = np.reshape(img, (28, 28))
   Image.fromarray(reshaped).save(f'reshaped{i}.png')

#+END_SRC
