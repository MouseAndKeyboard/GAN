#+TITLE: GAN

https://arxiv.org/abs/1406.2661

[[file:./images/screenshot-04.png]]

#+BEGIN_SRC python :noweb yes :tangle yes
<<core>>
#+END_SRC

* Implementation
:PROPERTIES:
:header-args: :noweb-ref core
:END:


#+BEGIN_SRC python :noweb yes
import torch
import torch.nn as nn
import torch.nn.functional as F

<<discriminator>>

<<generator>>

def main():
    <<preprocessing>>

if __name__ == '__main__':
    main()
#+END_SRC

* Preprocessing
:PROPERTIES:
:header-args: :noweb-ref preprocessing
:END:

Parse arguments
#+BEGIN_SRC python
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('data', help='path to data directory')
args = parser.parse_args()
#+END_SRC

Load data
#+BEGIN_SRC python
import numpy as np
from mnist import MNIST

mnist = MNIST(args.data)
x_train, y_train = mnist.load_training()
x_test, y_test = mnist.load_testing()

x_train = np.asarray(x_train).astype(np.float32)
y_train = np.asarray(y_train).astype(np.int32)
x_test = np.asarray(x_test).astype(np.float32)
y_test = np.asarray(y_test).astype(np.int32)
#+END_SRC

#+BEGIN_SRC python

THRESHOLD = 125
def black_and_white(sample):
    adjusted = np.empty_like(sample)
    adjusted[sample < THRESHOLD] = 0
    adjusted[sample >= THRESHOLD] = 1
    adjusted = adjusted.reshape(*adjusted.shape, 1)
    return adjusted

x_train = black_and_white(x_train)
x_test = black_and_white(x_test)
#+END_SRC

* Discriminator
:PROPERTIES:
:header-args: :noweb-ref disciminator
:END:

#+BEGIN_SRC python

class discriminator(nn.Module):
    def __init__(self, image_size=28):
      super(discriminator, self).__init__()

      self.conv1 = nn.Conv2d(1, 1, 4)
      self.pooling = nn.MaxPool2d(2, 2)
      self.conv2 = nn.Conv2d(1, 4)

      self.fc1 = nn.Linear(1 * 4 * 4, 64)
      self.fc2 = nn.Linear(64, 32)
      self.fc3 = nn.linear(32, 1)

    def forward(self, x):
        x = F.relu()

#+END_SRC

* Generator
:PROPERTIES:
:header-args: :noweb-ref generator
:END:
